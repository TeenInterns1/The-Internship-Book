/**\n * Main JavaScript - The Internship Book\n * Consolidated from multiple JS files for better performance\n */\n\n// ======================================\n// MAIN INITIALIZATION\n// ======================================\n\ndocument.addEventListener('DOMContentLoaded', function() {\n    // Register GSAP plugins if available\n    if (typeof gsap !== 'undefined') {\n        gsap.registerPlugin(ScrollTrigger);\n    }\n    \n    // Initialize core functionality\n    initNavigation();\n    initThemeToggle();\n    initPageTransitions();\n    initInteractiveQuestions();\n    initCounters();\n    initTabs();\n    setupIntersectionObserver();\n    initFAQAccordion();\n    \n    // Initialize animations after DOM is fully loaded\n    setTimeout(() => {\n        initializeAnimations();\n    }, 100);\n    \n    // Remove loading state\n    document.body.classList.remove('loading');\n});\n\n// ======================================\n// THEME TOGGLE FUNCTIONALITY\n// ======================================\n\nfunction initThemeToggle() {\n    const themeToggle = document.getElementById('themeToggle');\n    const mobileThemeToggle = document.getElementById('mobileThemeToggle');\n    const body = document.body;\n    \n    // Check for saved theme preference or default to 'dark'\n    const savedTheme = localStorage.getItem('theme') || 'dark';\n    body.setAttribute('data-theme', savedTheme);\n    \n    // Update toggle text for mobile\n    function updateToggleText(theme) {\n        const toggleText = document.querySelector('.toggle-text');\n        if (toggleText) {\n            toggleText.textContent = theme === 'dark' ? 'Light Mode' : 'Dark Mode';\n        }\n    }\n    \n    // Initialize toggle text\n    updateToggleText(savedTheme);\n    \n    // Toggle theme function\n    function toggleTheme() {\n        const currentTheme = body.getAttribute('data-theme');\n        const newTheme = currentTheme === 'dark' ? 'light' : 'dark';\n        \n        body.setAttribute('data-theme', newTheme);\n        localStorage.setItem('theme', newTheme);\n        updateToggleText(newTheme);\n        \n        // Smooth transition\n        body.style.transition = 'background-color 0.3s ease, color 0.3s ease';\n        setTimeout(() => {\n            body.style.transition = '';\n        }, 300);\n    }\n    \n    // Bind toggle events\n    if (themeToggle) {\n        themeToggle.addEventListener('click', toggleTheme);\n    }\n    \n    if (mobileThemeToggle) {\n        mobileThemeToggle.addEventListener('click', toggleTheme);\n    }\n}\n\n// ======================================\n// NAVIGATION FUNCTIONALITY\n// ======================================\n\nfunction initNavigation() {\n    const mobileMenuToggle = document.querySelector('.mobile-menu-toggle');\n    const mobileMenu = document.querySelector('.mobile-menu');\n    const mobileLinks = document.querySelectorAll('.mobile-link');\n    const siteHeader = document.querySelector('.site-header');\n    \n    // Mobile menu toggle\n    if (mobileMenuToggle && mobileMenu) {\n        mobileMenuToggle.addEventListener('click', function() {\n            mobileMenu.classList.toggle('active');\n            document.body.classList.toggle('mobile-menu-open');\n            \n            // Animate hamburger\n            const spans = this.querySelectorAll('span');\n            if (mobileMenu.classList.contains('active')) {\n                spans[0].style.transform = 'rotate(45deg) translate(5px, 5px)';\n                spans[1].style.opacity = '0';\n                spans[2].style.transform = 'rotate(-45deg) translate(7px, -6px)';\n            } else {\n                spans[0].style.transform = '';\n                spans[1].style.opacity = '';\n                spans[2].style.transform = '';\n            }\n        });\n        \n        // Close mobile menu when clicking on links\n        mobileLinks.forEach(link => {\n            link.addEventListener('click', () => {\n                mobileMenu.classList.remove('active');\n                document.body.classList.remove('mobile-menu-open');\n                \n                // Reset hamburger\n                const spans = mobileMenuToggle.querySelectorAll('span');\n                spans[0].style.transform = '';\n                spans[1].style.opacity = '';\n                spans[2].style.transform = '';\n            });\n        });\n    }\n    \n    // Header scroll effect\n    if (siteHeader) {\n        let lastScrollY = window.scrollY;\n        \n        window.addEventListener('scroll', () => {\n            const currentScrollY = window.scrollY;\n            \n            if (currentScrollY > 100) {\n                siteHeader.classList.add('scrolled');\n            } else {\n                siteHeader.classList.remove('scrolled');\n            }\n            \n            lastScrollY = currentScrollY;\n        });\n    }\n    \n    // Smooth scroll for anchor links\n    document.querySelectorAll('a[href^=\"#\"]').forEach(anchor => {\n        anchor.addEventListener('click', function (e) {\n            const href = this.getAttribute('href');\n            if (href === '#') return;\n            \n            e.preventDefault();\n            const target = document.querySelector(href);\n            \n            if (target) {\n                const offsetTop = target.offsetTop - 100;\n                window.scrollTo({\n                    top: offsetTop,\n                    behavior: 'smooth'\n                });\n            }\n        });\n    });\n}\n\n// ======================================\n// PAGE TRANSITIONS\n// ======================================\n\nfunction initPageTransitions() {\n    // Create transition element if it doesn't exist\n    if (!document.querySelector('.page-transition')) {\n        const transitionEl = document.createElement('div');\n        transitionEl.className = 'page-transition';\n        \n        const loader = document.createElement('div');\n        loader.className = 'loader';\n        \n        for (let i = 0; i < 3; i++) {\n            const circle = document.createElement('div');\n            circle.className = 'loader-circle';\n            loader.appendChild(circle);\n        }\n        \n        const text = document.createElement('div');\n        text.className = 'loader-text';\n        text.innerHTML = 'Loading<span class=\"dots\"></span>';\n        \n        transitionEl.appendChild(loader);\n        transitionEl.appendChild(text);\n        document.body.appendChild(transitionEl);\n    }\n    \n    // Handle page transitions\n    const transitionElement = document.querySelector('.page-transition');\n    \n    // Fade out transition on load\n    window.addEventListener('load', () => {\n        if (transitionElement) {\n            transitionElement.classList.add('fade-out');\n            setTimeout(() => {\n                transitionElement.style.display = 'none';\n            }, 500);\n        }\n    });\n    \n    // Show transition for external links\n    document.querySelectorAll('a[href]').forEach(link => {\n        link.addEventListener('click', function(e) {\n            const href = this.getAttribute('href');\n            const isExternal = href.startsWith('http') || href.startsWith('//');\n            const isHash = href.startsWith('#');\n            const isFile = href.includes('.html');\n            \n            if ((isExternal || isFile) && !isHash) {\n                e.preventDefault();\n                \n                if (transitionElement) {\n                    transitionElement.style.display = 'flex';\n                    transitionElement.classList.remove('fade-out');\n                }\n                \n                setTimeout(() => {\n                    window.location.href = href;\n                }, 300);\n            }\n        });\n    });\n}\n\n// ======================================\n// INTERACTIVE QUESTIONS (What/Why/How)\n// ======================================\n\nfunction initInteractiveQuestions() {\n    const questionBtns = document.querySelectorAll('.question-nav-btn');\n    const questionPanels = document.querySelectorAll('.question-panel');\n    \n    if (questionBtns.length === 0) return;\n    \n    questionBtns.forEach(btn => {\n        btn.addEventListener('click', function() {\n            const targetQuestion = this.dataset.question;\n            \n            // Remove active class from all buttons and panels\n            questionBtns.forEach(b => b.classList.remove('active'));\n            questionPanels.forEach(p => p.classList.remove('active'));\n            \n            // Add active class to clicked button\n            this.classList.add('active');\n            \n            // Show corresponding panel\n            const targetPanel = document.querySelector(`[data-question=\"${targetQuestion}\"]`);\n            if (targetPanel && targetPanel.classList.contains('question-panel')) {\n                targetPanel.classList.add('active');\n            }\n        });\n    });\n}\n\n// ======================================\n// TAB FUNCTIONALITY\n// ======================================\n\nfunction initTabs() {\n    const tabBtns = document.querySelectorAll('.tab-btn');\n    const tabPanels = document.querySelectorAll('.tab-panel');\n    \n    if (tabBtns.length === 0) return;\n    \n    tabBtns.forEach(btn => {\n        btn.addEventListener('click', function() {\n            const targetTab = this.dataset.tab;\n            \n            // Remove active class from all buttons and panels\n            tabBtns.forEach(b => b.classList.remove('active'));\n            tabPanels.forEach(p => p.classList.remove('active'));\n            \n            // Add active class to clicked button\n            this.classList.add('active');\n            \n            // Show corresponding panel\n            const targetPanel = document.querySelector(`[data-tab=\"${targetTab}\"]`);\n            if (targetPanel && targetPanel.classList.contains('tab-panel')) {\n                targetPanel.classList.add('active');\n            }\n        });\n    });\n}\n\n// ======================================\n// COUNTERS AND ANIMATIONS\n// ======================================\n\nfunction initCounters() {\n    const counters = document.querySelectorAll('[data-count]');\n    \n    counters.forEach(counter => {\n        const target = parseInt(counter.dataset.count);\n        const duration = 2000;\n        const increment = target / (duration / 16);\n        let current = 0;\n        \n        const updateCounter = () => {\n            current += increment;\n            if (current >= target) {\n                counter.textContent = target;\n            } else {\n                counter.textContent = Math.floor(current);\n                requestAnimationFrame(updateCounter);\n            }\n        };\n        \n        const observer = new IntersectionObserver((entries) => {\n            entries.forEach(entry => {\n                if (entry.isIntersecting) {\n                    updateCounter();\n                    observer.unobserve(entry.target);\n                }\n            });\n        });\n        \n        observer.observe(counter);\n    });\n}\n\nfunction setupIntersectionObserver() {\n    const observer = new IntersectionObserver((entries) => {\n        entries.forEach(entry => {\n            if (entry.isIntersecting) {\n                entry.target.classList.add('in-view');\n            }\n        });\n    }, {\n        threshold: 0.1,\n        rootMargin: '0px 0px -50px 0px'\n    });\n    \n    document.querySelectorAll('.animate-fade-up, .animate-fade-right, .animate-fade-left, .animate-pop').forEach(el => {\n        observer.observe(el);\n    });\n}\n\nfunction initializeAnimations() {\n    if (typeof gsap !== 'undefined') {\n        gsap.from('.section-header', {\n            duration: 1,\n            y: 50,\n            opacity: 0,\n            stagger: 0.2,\n            scrollTrigger: {\n                trigger: '.section-header',\n                start: 'top 80%'\n            }\n        });\n    }\n}\n\n// ======================================\n// FAQ ACCORDION\n// ======================================\n\nfunction initFAQAccordion() {\n    const faqQuestions = document.querySelectorAll('.faq-question');\n    \n    faqQuestions.forEach((btn) => {\n        btn.addEventListener('click', () => {\n            const answer = btn.nextElementSibling;\n            const isOpen = answer.classList.contains('open');\n            \n            document.querySelectorAll('.faq-answer').forEach(a => a.classList.remove('open'));\n            document.querySelectorAll('.faq-question').forEach(q => q.classList.remove('active'));\n            \n            if (!isOpen) {\n                answer.classList.add('open');\n                btn.classList.add('active');\n                \n                const icon = btn.querySelector('.faq-icon');\n                if (icon) {\n                    icon.textContent = '\u2796';\n                }\n            } else {\n                const icon = btn.querySelector('.faq-icon');\n                if (icon) {\n                    icon.textContent = '\u2795';\n                }\n            }\n        });\n    });\n}\n\n// ======================================\n// UTILITY FUNCTIONS\n// ======================================\n\nfunction scrollToElement(elementId) {\n    const element = document.getElementById(elementId);\n    if (element) {\n        const offsetTop = element.offsetTop - 100;\n        window.scrollTo({\n            top: offsetTop,\n            behavior: 'smooth'\n        });\n    }\n}\n\nfunction debounce(func, wait) {\n    let timeout;\n    return function executedFunction(...args) {\n        const later = () => {\n            clearTimeout(timeout);\n            func(...args);\n        };\n        clearTimeout(timeout);\n        timeout = setTimeout(later, wait);\n    };\n}\n\nfunction isInViewport(element) {\n    const rect = element.getBoundingClientRect();\n    return (\n        rect.top >= 0 &&\n        rect.left >= 0 &&\n        rect.bottom <= (window.innerHeight || document.documentElement.clientHeight) &&\n        rect.right <= (window.innerWidth || document.documentElement.clientWidth)\n    );\n}\n\n// ======================================\n// PERFORMANCE OPTIMIZATIONS\n// ======================================\n\nfunction initLazyLoading() {\n    const images = document.querySelectorAll('img[data-src]');\n    \n    const imageObserver = new IntersectionObserver((entries) => {\n        entries.forEach(entry => {\n            if (entry.isIntersecting) {\n                const img = entry.target;\n                img.src = img.dataset.src;\n                img.removeAttribute('data-src');\n                imageObserver.unobserve(img);\n            }\n        });\n    });\n    \n    images.forEach(img => imageObserver.observe(img));\n}\n\ndocument.addEventListener('DOMContentLoaded', initLazyLoading);\n\n// ======================================\n// ERROR HANDLING\n// ======================================\n\nwindow.addEventListener('error', function(event) {\n    console.error('Global error:', event.error);\n});\n\nwindow.addEventListener('unhandledrejection', function(event) {\n    console.error('Unhandled promise rejection:', event.reason);\n});\n\n// ======================================\n// EXPORT FUNCTIONS FOR GLOBAL USE\n// ======================================\n\nwindow.scrollToElement = scrollToElement;\nwindow.debounce = debounce;\nwindow.isInViewport = isInViewport;"